// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RepositoryLayer.Context;

namespace RepositoryLayer.Migrations
{
    [DbContext(typeof(FundooContext))]
    [Migration("20221012100924_lableMigration")]
    partial class lableMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RepositoryLayer.Entity.CollabEntity", b =>
                {
                    b.Property<long>("collabId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("collabEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("modifyDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("noteEntitynoteID")
                        .HasColumnType("bigint");

                    b.Property<long>("noteID")
                        .HasColumnType("bigint");

                    b.Property<long?>("userEntityUserId")
                        .HasColumnType("bigint");

                    b.HasKey("collabId");

                    b.HasIndex("noteEntitynoteID");

                    b.HasIndex("userEntityUserId");

                    b.ToTable("CollaboratorTable");
                });

            modelBuilder.Entity("RepositoryLayer.Entity.LableEntity", b =>
                {
                    b.Property<long>("lableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("lableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("noteEntitynoteID")
                        .HasColumnType("bigint");

                    b.Property<long>("noteID")
                        .HasColumnType("bigint");

                    b.Property<long?>("userEntityUserId")
                        .HasColumnType("bigint");

                    b.HasKey("lableId");

                    b.HasIndex("noteEntitynoteID");

                    b.HasIndex("userEntityUserId");

                    b.ToTable("LableTable");
                });

            modelBuilder.Entity("RepositoryLayer.Entity.NoteEntity", b =>
                {
                    b.Property<long>("noteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("archive")
                        .HasColumnType("bit");

                    b.Property<string>("color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("discription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("pin")
                        .HasColumnType("bit");

                    b.Property<DateTime>("reminder")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("time_created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("time_edited")
                        .HasColumnType("datetime2");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("trash")
                        .HasColumnType("bit");

                    b.Property<long?>("userEntityUserId")
                        .HasColumnType("bigint");

                    b.HasKey("noteID");

                    b.HasIndex("userEntityUserId");

                    b.ToTable("NoteTable");
                });

            modelBuilder.Entity("RepositoryLayer.Entity.UserEntity", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserTable");
                });

            modelBuilder.Entity("RepositoryLayer.Entity.CollabEntity", b =>
                {
                    b.HasOne("RepositoryLayer.Entity.NoteEntity", "noteEntity")
                        .WithMany()
                        .HasForeignKey("noteEntitynoteID");

                    b.HasOne("RepositoryLayer.Entity.UserEntity", "userEntity")
                        .WithMany()
                        .HasForeignKey("userEntityUserId");
                });

            modelBuilder.Entity("RepositoryLayer.Entity.LableEntity", b =>
                {
                    b.HasOne("RepositoryLayer.Entity.NoteEntity", "noteEntity")
                        .WithMany()
                        .HasForeignKey("noteEntitynoteID");

                    b.HasOne("RepositoryLayer.Entity.UserEntity", "userEntity")
                        .WithMany()
                        .HasForeignKey("userEntityUserId");
                });

            modelBuilder.Entity("RepositoryLayer.Entity.NoteEntity", b =>
                {
                    b.HasOne("RepositoryLayer.Entity.UserEntity", "userEntity")
                        .WithMany()
                        .HasForeignKey("userEntityUserId");
                });
#pragma warning restore 612, 618
        }
    }
}
